// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  order       Int

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model ChatRoom {
  id        String    @id @default(uuid())
  orgId     String    @unique 
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
}

model Message {
  id         String   @id @default(uuid())
  chatRoomId String
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  userId     String    
  content    String    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatRoomId])
}

model Event {
  id          String  @id @default(uuid())
  orgId       String
  name        String
  place       String? @db.Text // Optional
  date        DateTime? // Optional
  description String  @db.Text
  rewards     String? @db.Text // Optional
  contactInfo String? @db.Text // Optional

  posts SocialMediaPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
}

model SocialMediaPost {
  id          String    @id @default(uuid())
  orgId       String
  eventId     String
  platform    String    @default("LinkedIn")
  content     String    @db.Text
  imageUrl    String?   @db.Text 
  postedAt    DateTime? 
  status      String    @default("draft") 

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
  @@index([eventId])
}

model Budget {
  id        String    @id @default(uuid())
  orgId     String    @unique 
  total     Float     
  expenses  Expense[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([orgId])
}

model Expense {
  id        String    @id @default(uuid())
  budgetId  String
  budget    Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  reason    String    
  amount    Float     

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([budgetId])
}

model Judge {
  id             String  @id @default(uuid())
  name           String  @unique
  expertise      String
  availability   String
  rate           Float
  relevanceScore Int
  location       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}